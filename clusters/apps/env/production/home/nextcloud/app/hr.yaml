---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: nextcloud
spec:
  interval: 30m
  chart:
    spec:
      chart: nextcloud
      version: 6.6.2
      sourceRef:
        kind: HelmRepository
        name: nextcloud-charts
        namespace: flux-system
  values:
    ## Official nextcloud image version
    ## ref: https://hub.docker.com/r/library/nextcloud/tags/
    ##
    image:
      repository: nextcloud
      flavor: apache
      # default is generated by flavor and appVersion
      tag: 30.0.5-apache
      pullPolicy: IfNotPresent
      # pullSecrets:
      #   - myRegistrKeySecretName

    nameOverride: ""
    fullnameOverride: ""
    podAnnotations: {}
    deploymentAnnotations: {}
    deploymentLabels: {}

    # Number of replicas to be deployed
    replicaCount: 1

    ## Allowing use of ingress controllers
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
    ##
    ingress:
      enabled: false
      # className: nginx
      annotations: {}
      #  nginx.ingress.kubernetes.io/proxy-body-size: 4G
      #  kubernetes.io/tls-acme: "true"
      #  cert-manager.io/cluster-issuer: letsencrypt-prod
      #  # Keep this in sync with the README.md:
      #  nginx.ingress.kubernetes.io/server-snippet: |-
      #    server_tokens off;
      #    proxy_hide_header X-Powered-By;
      #    rewrite ^/.well-known/webfinger /index.php/.well-known/webfinger last;
      #    rewrite ^/.well-known/nodeinfo /index.php/.well-known/nodeinfo last;
      #    rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
      #    rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
      #    location = /.well-known/carddav {
      #      return 301 $scheme://$host/remote.php/dav;
      #    }
      #    location = /.well-known/caldav {
      #      return 301 $scheme://$host/remote.php/dav;
      #    }
      #    location = /robots.txt {
      #      allow all;
      #      log_not_found off;
      #      access_log off;
      #    }
      #    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
      #      deny all;
      #    }
      #    location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
      #      deny all;
      #    }
      # tls:
      #   - secretName: nextcloud-tls
      #     hosts:
      #       - nextcloud.kube.home
      labels: {}
      path: /
      pathType: Prefix

    phpClientHttpsFix:
      enabled: false
      protocol: https

    nextcloud:
      host: cloud.${FAMILY_DOMAIN}
      existingSecret:
        enabled: true
        secretName: nextcloud-secret
        usernameKey: NEXTCLOUD_ADMIN_USER
        passwordKey: NEXTCLOUD_ADMIN_PASSWORD
        tokenKey: ""
      update: 0
      # If web server is not binding default port, you can define it
      containerPort: 80
      datadir: /var/www/html/data
      persistence:
        subPath:
      # if set, we'll template this list to the NEXTCLOUD_TRUSTED_DOMAINS env var
      trustedDomains: []

      ## PHP Configuration files
      # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
      phpConfigs: {}
      ## Default config files that utilize environment variables:
      # see: https://github.com/nextcloud/docker/tree/master#auto-configuration-via-environment-variables
      # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
      # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/.config
      defaultConfigs:
        # To protect /var/www/html/config
        .htaccess: true
        # Apache configuration for rewrite urls
        apache-pretty-urls.config.php: true
        # Define APCu as local cache
        apcu.config.php: true
        # Apps directory configs
        apps.config.php: true
        # Used for auto configure database
        autoconfig.php: true
        # Redis default configuration
        redis.config.php: true
        # Reverse proxy default configuration
        reverse-proxy.config.php: true
        # S3 Object Storage as primary storage
        s3.config.php: true
        # SMTP default configuration via environment variables
        smtp.config.php: true
        # Swift Object Storage as primary storage
        swift.config.php: true
        # disables the web based updater as the default nextcloud docker image does not support it
        upgrade-disable-web.config.php: true
        # -- imaginary support config
        imaginary.config.php: false

      # Extra config files created in /var/www/html/config/
      # ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html#multiple-config-php-file
      configs: {}
      # For example, to enable image and text file previews:
      #  previews.config.php: |-
      #    <?php
      #    $CONFIG = array (
      #      'enable_previews' => true,
      #      'enabledPreviewProviders' => array (
      #        'OC\Preview\Movie',
      #        'OC\Preview\PNG',
      #        'OC\Preview\JPEG',
      #        'OC\Preview\GIF',
      #        'OC\Preview\BMP',
      #        'OC\Preview\XBitmap',
      #        'OC\Preview\MP3',
      #        'OC\Preview\MP4',
      #        'OC\Preview\TXT',
      #        'OC\Preview\MarkDown',
      #        'OC\Preview\PDF'
      #      ),
      #    );

      # Extra init containers that runs before pods start.
      extraInitContainers:
        - name: init-db
          image: ghcr.io/onedr0p/postgres-init:16
          envFrom: &envFrom
            - secretRef:
                name: nextcloud-secret

      # Set securityContext parameters for the nextcloud CONTAINER only (will not affect nginx container).
      # For example, you may need to define runAsNonRoot directive
      securityContext:
        runAsUser: ${APP_UID}
        runAsGroup: ${APP_UID}
        runAsNonRoot: true
        readOnlyRootFilesystem: false

      # Set securityContext parameters for the entire pod. For example, you may need to define runAsNonRoot directive
      podSecurityContext:
        runAsUser: ${APP_UID}
        runAsGroup: ${APP_UID}
        runAsNonRoot: true
        readOnlyRootFilesystem: false

      # Settings for the PostgreSQL init container
      postgreSqlInitContainer:
        resources: {}
        # Set postgresql initContainer securityContext parameters. For example, you may need to define runAsNonRoot directive
        securityContext: {}

    internalDatabase:
      enabled: false

    externalDatabase:
      enabled: true

      ## Supported database engines: mysql or postgresql
      type: postgresql

      ## Use a existing secret
      existingSecret:
        enabled: true
        secretName: nextcloud-secret
        usernameKey: INIT_POSTGRES_USER
        passwordKey: INIT_POSTGRES_PASS
        hostKey: INIT_POSTGRES_HOST
        databaseKey: INIT_POSTGRES_DBNAME

    ##
    ## Redis chart configuration
    ## for more options see https://github.com/bitnami/charts/tree/main/bitnami/redis
    ##
    redis:
      enabled: false
      auth:
        enabled: true
        password: 'changeme'
        # name of an existing secret with RedisÂ® credentials (instead of auth.password), must be created ahead of time
        existingSecret: ""
        # Password key to be retrieved from existing secret
        existingSecretPasswordKey: ""
      # Since Redis is used for caching only, you might want to use a storageClass with different reclaim policy and backup settings
      global:
        storageClass: ""
      master:
        persistence:
          enabled: true
      replica:
        persistence:
          enabled: true

    ## Cronjob to execute Nextcloud background tasks
    ## ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/background_jobs_configuration.html#cron
    ##
    cronjob:
      enabled: false

      ## Cronjob sidecar resource requests and limits
      ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
      ##
      resources: {}

      # Allow configuration of lifecycle hooks
      # ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
      lifecycle: {}
        # postStartCommand: []
        # preStopCommand: []
      # Set securityContext parameters. For example, you may need to define runAsNonRoot directive
      securityContext: {}
      #   runAsUser: 33
      #   runAsGroup: 33
      #   runAsNonRoot: true
      #   readOnlyRootFilesystem: true

    service:
      type: ClusterIP
      port: 8080
      loadBalancerIP: ""
      nodePort:
      # -- use additional annotation on service for nextcloud
      annotations: {}

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      # Nextcloud Data (/var/www/html)
      enabled: true
      existingClaim: nextcloud-config

      ## Use an additional pvc for the data directory rather than a subpath of the default PVC
      ## Useful to store data on a different storageClass (e.g. on slower disks)
      nextcloudData:
        enabled: true
        subPath: data
        existingClaim: nextcloud-data

    resources:
      limits:
        memory: 10Gi
      requests:
        memory: 4Gi

    ## Liveness and readiness probe values
    ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    startupProbe:
      enabled: false
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 30
      successThreshold: 1

    nodeSelector: {}

    tolerations: []

    affinity: {}

    dnsConfig: {}
    # Custom dns config for Nextcloud containers.
    # You can for example configure ndots. This may be needed in some clusters with alpine images.
    # options:
    #   - name: ndots
    #     value: "1"

    ## Prometheus Exporter / Metrics
    ##
    metrics:
      enabled: true

      replicaCount: 1
      # Optional: becomes NEXTCLOUD_SERVER env var in the nextcloud-exporter container.
      # Without it, we will use the full name of the nextcloud service
      server: ""
      # The metrics exporter needs to know how you serve Nextcloud either http or https
      https: false
      # Use API token if set, otherwise fall back to password authentication
      # https://github.com/xperimental/nextcloud-exporter#token-authentication
      # Currently you still need to set the token manually in your nextcloud install
      token: ""
      timeout: 5s
      # if set to true, exporter skips certificate verification of Nextcloud server.
      tlsSkipVerify: false
      info:
        # Optional: becomes NEXTCLOUD_INFO_APPS env var in the nextcloud-exporter container.
        # Enables gathering of apps-related metrics. Defaults to false
        apps: false

      image:
        repository: xperimental/nextcloud-exporter
        tag: 0.6.2
        pullPolicy: IfNotPresent
        # pullSecrets:
        #   - myRegistrKeySecretName

      ## Metrics exporter resource requests and limits
      ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
      ##
      resources: {}

      # -- Metrics exporter pod Annotation
      podAnnotations: {}

      # -- Metrics exporter pod Labels
      podLabels: {}

      # -- Metrics exporter pod nodeSelector
      nodeSelector: {}

      # -- Metrics exporter pod tolerations
      tolerations: []

      # -- Metrics exporter pod affinity
      affinity: {}

      service:
        type: ClusterIP
        # Use serviceLoadBalancerIP to request a specific static IP,
        # otherwise leave blank
        loadBalancerIP:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9205"
        labels: {}

      # -- security context for the metrics CONTAINER in the pod
      securityContext:
        runAsUser: ${APP_UID}
        runAsNonRoot: true
        # allowPrivilegeEscalation: false
        # capabilities:
        #   drop:
        #     - ALL

      # -- security context for the metrics POD
      podSecurityContext: {}
      # runAsNonRoot: true
      # seccompProfile:
      #   type: RuntimeDefault

      ## Prometheus Operator ServiceMonitor configuration
      ##
      serviceMonitor:
        ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
        ##
        enabled: false

        ## @param metrics.serviceMonitor.namespace Namespace in which Prometheus is running
        ##
        namespace: ""

        ## @param metrics.serviceMonitor.namespaceSelector The selector of the namespace where the target service is located (defaults to the release namespace)
        namespaceSelector:

        ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
        ##
        jobLabel: ""

        ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
        ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
        ##
        interval: 30s

        ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
        ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
        ##
        scrapeTimeout: ""

        ## @param metrics.serviceMonitor.labels Extra labels for the ServiceMonitor
        ##
        labels: {}


    rbac:
      enabled: true
      serviceaccount:
        create: true
        name: nextcloud-serviceaccount
        annotations: {}


    ## @param securityContext for nextcloud pod @deprecated Use `nextcloud.podSecurityContext` instead
    securityContext: {}
