---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: nextcloud
spec:
  interval: 30m
  chart:
    spec:
      chart: nextcloud
      version: 6.6.2
      sourceRef:
        kind: HelmRepository
        name: nextcloud-charts
        namespace: flux-system
  values:
    ## Official nextcloud image version
    ## ref: https://hub.docker.com/r/library/nextcloud/tags/
    ##
    image:
      repository: nextcloud
      tag: 31.0.0-fpm@sha256:dd76149894cc80b2d55b06d9d3f79a8aacc9d5246161bdcf4e0271406af10c8e
      pullPolicy: IfNotPresent

    nameOverride: ""
    fullnameOverride: ""
    podAnnotations: {}
    deploymentAnnotations: {}
    deploymentLabels: {}

    # Number of replicas to be deployed
    replicaCount: 1

    ## Allowing use of ingress controllers
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
    ##
    ingress:
      enabled: false
      # className: nginx
      annotations: {}
      #  nginx.ingress.kubernetes.io/proxy-body-size: 4G
      #  kubernetes.io/tls-acme: "true"
      #  cert-manager.io/cluster-issuer: letsencrypt-prod
      #  # Keep this in sync with the README.md:
      #  nginx.ingress.kubernetes.io/server-snippet: |-
      #    server_tokens off;
      #    proxy_hide_header X-Powered-By;
      #    rewrite ^/.well-known/webfinger /index.php/.well-known/webfinger last;
      #    rewrite ^/.well-known/nodeinfo /index.php/.well-known/nodeinfo last;
      #    rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
      #    rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
      #    location = /.well-known/carddav {
      #      return 301 $scheme://$host/remote.php/dav;
      #    }
      #    location = /.well-known/caldav {
      #      return 301 $scheme://$host/remote.php/dav;
      #    }
      #    location = /robots.txt {
      #      allow all;
      #      log_not_found off;
      #      access_log off;
      #    }
      #    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
      #      deny all;
      #    }
      #    location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
      #      deny all;
      #    }
      # tls:
      #   - secretName: nextcloud-tls
      #     hosts:
      #       - nextcloud.kube.home
      labels: {}
      path: /
      pathType: Prefix

    phpClientHttpsFix:
      enabled: true
      protocol: https

    nextcloud:
      host: cloud.${FAMILY_DOMAIN}
      existingSecret:
        enabled: true
        secretName: nextcloud-secret
        usernameKey: NEXTCLOUD_ADMIN_USER
        passwordKey: NEXTCLOUD_ADMIN_PASSWORD
        tokenKey: ""
      update: 0
      # If web server is not binding default port, you can define it
      containerPort: 8080
      datadir: /var/www/html/data
      persistence:
        subPath:
      # if set, we'll template this list to the NEXTCLOUD_TRUSTED_DOMAINS env var
      trustedDomains: []

      ## PHP Configuration files
      # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
      phpConfigs:
        custom.config.php: |
          <?php
            $CONFIG = array(
              "check_data_directory_permissions"=> false, # fix data directory permissions error
              "trusted_domains" => array (
                $_ENV["NEXTCLOUD_TRUSTED_DOMAINS"], # fix probes 400 error
              ),
            );
      ## Default config files that utilize environment variables:
      # see: https://github.com/nextcloud/docker/tree/master#auto-configuration-via-environment-variables
      # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
      # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/.config
      defaultConfigs:
        # To protect /var/www/html/config
        .htaccess: true
        # Apache configuration for rewrite urls
        apache-pretty-urls.config.php: true
        # Define APCu as local cache
        apcu.config.php: true
        # Apps directory configs
        apps.config.php: true
        # Used for auto configure database
        autoconfig.php: true
        # Redis default configuration
        redis.config.php: true
        # Reverse proxy default configuration
        reverse-proxy.config.php: true
        # S3 Object Storage as primary storage
        s3.config.php: true
        # SMTP default configuration via environment variables
        smtp.config.php: true
        # Swift Object Storage as primary storage
        swift.config.php: true
        # disables the web based updater as the default nextcloud docker image does not support it
        upgrade-disable-web.config.php: true
        # -- imaginary support config
        imaginary.config.php: false

      # Extra config files created in /var/www/html/config/
      # ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html#multiple-config-php-file
      configs:
        fed-fixes.config.php: |-
          <?php
          $CONFIG = array (
            "davstorage.request_timeout" => 200,
          );
      # For example, to enable image and text file previews:
      #  previews.config.php: |-
      #    <?php
      #    $CONFIG = array (
      #      'enable_previews' => true,
      #      'enabledPreviewProviders' => array (
      #        'OC\Preview\Movie',
      #        'OC\Preview\PNG',
      #        'OC\Preview\JPEG',
      #        'OC\Preview\GIF',
      #        'OC\Preview\BMP',
      #        'OC\Preview\XBitmap',
      #        'OC\Preview\MP3',
      #        'OC\Preview\MP4',
      #        'OC\Preview\TXT',
      #        'OC\Preview\MarkDown',
      #        'OC\Preview\PDF'
      #      ),
      #    );

      extraVolumes:
        - name: nginx-cache
          mountPath: "/var/cache/nginx" # fix permission denied error
      #  - name: nfs
      #    nfs:
      #      server: "10.0.0.1"
      #      path: "/nextcloud_data"
      #      readOnly: false

      # Extra init containers that runs before pods start.
      extraInitContainers:
        - name: init-db
          image: ghcr.io/onedr0p/postgres-init:16
          envFrom: &envFrom
            - secretRef:
                name: nextcloud-secret

      # Set securityContext parameters for the nextcloud CONTAINER only (will not affect nginx container).
      # For example, you may need to define runAsNonRoot directive
      securityContext:
        runAsUser: ${APP_UID}
        runAsGroup: ${APP_UID}
        runAsNonRoot: true
        readOnlyRootFilesystem: false

      # Set securityContext parameters for the entire pod. For example, you may need to define runAsNonRoot directive
      podSecurityContext:
        runAsUser: ${APP_UID}
        runAsGroup: ${APP_UID}
        runAsNonRoot: true
        readOnlyRootFilesystem: false

      # Settings for the PostgreSQL init container
      postgreSqlInitContainer:
        resources: {}
        # Set postgresql initContainer securityContext parameters. For example, you may need to define runAsNonRoot directive
        securityContext: {}

    internalDatabase:
      enabled: false

    externalDatabase:
      enabled: true

      ## Supported database engines: mysql or postgresql
      type: postgresql

      ## Use a existing secret
      existingSecret:
        enabled: true
        secretName: nextcloud-secret
        usernameKey: INIT_POSTGRES_USER
        passwordKey: INIT_POSTGRES_PASS
        hostKey: INIT_POSTGRES_HOST
        databaseKey: INIT_POSTGRES_DBNAME

    nginx:
      enabled: true
      image:
        repository: nginxinc/nginx-unprivileged
        tag: 1.27.4@sha256:7a76302625f26fd9ea82da99c0e14c5f4def3a839b21e4138acdcbefc790219f
      containerPort: 8080

      config:
        default: false

        custom: |-
          upstream php-handler {
              server 127.0.0.1:9000;
          }

          server {
              # Default, IPv4 only
              listen 8080;

              # HSTS settings
              # WARNING: Only add the preload option once you read about
              # the consequences in https://hstspreload.org/. This option
              # will add the domain to a hardcoded list that is shipped
              # in all major browsers and getting removed from this list
              # could take several months.
              add_header Referrer-Policy "no-referrer" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-Download-Options "noopen" always;
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Permitted-Cross-Domain-Policies "none" always;
              add_header X-Robots-Tag "noindex, nofollow" always;
              add_header X-XSS-Protection "1; mode=block" always;

              # set max upload size
              client_max_body_size 10G;
              fastcgi_buffers 64 4K;

              # Enable gzip but do not remove ETag headers
              gzip on;
              gzip_vary on;
              gzip_comp_level 4;
              gzip_min_length 256;
              gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
              gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

              # Pagespeed is not supported by Nextcloud, so if your server is built
              # with the `ngx_pagespeed` module, uncomment this line to disable it.
              #pagespeed off;

              # Remove X-Powered-By, which is an information leak
              fastcgi_hide_header X-Powered-By;

              # Add .mjs as a file extension for javascript
              # Either include it in the default mime.types list
              # or include you can include that list explicitly and add the file extension
              # only for Nextcloud like below:
              include mime.types;
              types {
                  text/javascript js mjs;
              }

              # Path to the root of your installation
              root /var/www/html;

              # Specify how to handle directories -- specifying `/index.php$request_uri`
              # here as the fallback means that Nginx always exhibits the desired behaviour
              # when a client requests a path that corresponds to a directory that exists
              # on the server. In particular, if that directory contains an index.php file,
              # that file is correctly served; if it doesn't, then the request is passed to
              # the front-end controller. This consistent behaviour means that we don't need
              # to specify custom rules for certain paths (e.g. images and other assets,
              # `/updater`, `/ocm-provider`, `/ocs-provider`), and thus
              # `try_files $uri $uri/ /index.php$request_uri`
              # always provides the desired behaviour.
              index index.php index.html /index.php$request_uri;

              # Rule borrowed from `.htaccess` to handle Microsoft DAV clients
              location = / {
                  if ( $http_user_agent ~ ^DavClnt ) {
                      return 302 /remote.php/webdav/$is_args$args;
                  }
              }

              location = /robots.txt {
                  allow all;
                  log_not_found off;
                  access_log off;
              }

              # Make a regex exception for `/.well-known` so that clients can still
              # access it despite the existence of the regex rule
              # `location ~ /(\.|autotest|...)` which would otherwise handle requests
              # for `/.well-known`.
              location ^~ /.well-known {
                  # The following 6 rules are borrowed from `.htaccess`

                  location = /.well-known/carddav     { return 301 /remote.php/dav/; }
                  location = /.well-known/caldav      { return 301 /remote.php/dav/; }
                  # Anything else is dynamically handled by Nextcloud
                  location ^~ /.well-known            { return 301 /index.php$uri; }

                  try_files $uri $uri/ =404;
              }

              # Rules borrowed from `.htaccess` to hide certain paths from clients
              location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)  { return 404; }
              location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console)              { return 404; }

              # Ensure this block, which passes PHP files to the PHP process, is above the blocks
              # which handle static assets (as seen below). If this block is not declared first,
              # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`
              # to the URI, resulting in a HTTP 500 error response.
              location ~ \.php(?:$|/) {
                  # Required for legacy support
                  rewrite ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+|.+\/richdocumentscode(_arm64)?\/proxy) /index.php$request_uri;

                  fastcgi_split_path_info ^(.+?\.php)(/.*)$;
                  set $path_info $fastcgi_path_info;

                  try_files $fastcgi_script_name =404;

                  include fastcgi_params;
                  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                  fastcgi_param PATH_INFO $path_info;
                  #fastcgi_param HTTPS on;

                  fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice
                  fastcgi_param front_controller_active true;     # Enable pretty urls
                  fastcgi_pass php-handler;

                  fastcgi_intercept_errors on;
                  fastcgi_request_buffering off;
                  fastcgi_read_timeout 200s;
                  fastcgi_send_timeout 200s;
              }

              location ~ \.(?:css|js|svg|gif)$ {
                  try_files $uri /index.php$request_uri;
                  expires 6M;         # Cache-Control policy borrowed from `.htaccess`
                  access_log off;     # Optional: Don't log access to assets
              }

              location ~ \.woff2?$ {
                  try_files $uri /index.php$request_uri;
                  expires 7d;         # Cache-Control policy borrowed from `.htaccess`
                  access_log off;     # Optional: Don't log access to assets
              }

              location / {
                  try_files $uri $uri/ /index.php$request_uri;
              }
          }

    ##
    ## Redis chart configuration
    ## for more options see https://github.com/bitnami/charts/tree/main/bitnami/redis
    ##
    redis:
      enabled: false
      auth:
        enabled: true
        password: 'changeme'
        # name of an existing secret with Redis® credentials (instead of auth.password), must be created ahead of time
        existingSecret: ""
        # Password key to be retrieved from existing secret
        existingSecretPasswordKey: ""
      # Since Redis is used for caching only, you might want to use a storageClass with different reclaim policy and backup settings
      global:
        storageClass: ""
      master:
        persistence:
          enabled: true
      replica:
        persistence:
          enabled: true

    ## Cronjob to execute Nextcloud background tasks
    ## ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/background_jobs_configuration.html#cron
    ##
    cronjob:
      enabled: false

      ## Cronjob sidecar resource requests and limits
      ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
      ##
      resources: {}

      # Allow configuration of lifecycle hooks
      # ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
      lifecycle: {}
        # postStartCommand: []
        # preStopCommand: []
      # Set securityContext parameters. For example, you may need to define runAsNonRoot directive
      securityContext: {}
      #   runAsUser: 33
      #   runAsGroup: 33
      #   runAsNonRoot: true
      #   readOnlyRootFilesystem: true

    service:
      type: ClusterIP
      port: 8080
      loadBalancerIP: ""
      nodePort:
      # -- use additional annotation on service for nextcloud
      annotations: {}

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      # Nextcloud Data (/var/www/html)
      enabled: true
      existingClaim: nextcloud-config

      ## Use an additional pvc for the data directory rather than a subpath of the default PVC
      ## Useful to store data on a different storageClass (e.g. on slower disks)
      nextcloudData:
        enabled: true
        subPath: data
        existingClaim: nextcloud-data

    resources:
      limits:
        memory: 10Gi
      requests:
        memory: 4Gi

    ## Liveness and readiness probe values
    ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    startupProbe:
      enabled: false
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 30
      successThreshold: 1

    nodeSelector: {}

    tolerations: []

    affinity: {}

    dnsConfig: {}
    # Custom dns config for Nextcloud containers.
    # You can for example configure ndots. This may be needed in some clusters with alpine images.
    # options:
    #   - name: ndots
    #     value: "1"

    ## Prometheus Exporter / Metrics
    ##
    metrics:
      enabled: true

      replicaCount: 1
      # Optional: becomes NEXTCLOUD_SERVER env var in the nextcloud-exporter container.
      # Without it, we will use the full name of the nextcloud service
      server: ""
      # The metrics exporter needs to know how you serve Nextcloud either http or https
      https: false
      # Use API token if set, otherwise fall back to password authentication
      # https://github.com/xperimental/nextcloud-exporter#token-authentication
      # Currently you still need to set the token manually in your nextcloud install
      token: ""
      timeout: 5s
      # if set to true, exporter skips certificate verification of Nextcloud server.
      tlsSkipVerify: false
      info:
        # Optional: becomes NEXTCLOUD_INFO_APPS env var in the nextcloud-exporter container.
        # Enables gathering of apps-related metrics. Defaults to false
        apps: false

      image:
        repository: xperimental/nextcloud-exporter
        tag: 0.8.0
        pullPolicy: IfNotPresent
        # pullSecrets:
        #   - myRegistrKeySecretName

      ## Metrics exporter resource requests and limits
      ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
      ##
      resources: {}

      # -- Metrics exporter pod Annotation
      podAnnotations: {}

      # -- Metrics exporter pod Labels
      podLabels: {}

      # -- Metrics exporter pod nodeSelector
      nodeSelector: {}

      # -- Metrics exporter pod tolerations
      tolerations: []

      # -- Metrics exporter pod affinity
      affinity: {}

      service:
        type: ClusterIP
        # Use serviceLoadBalancerIP to request a specific static IP,
        # otherwise leave blank
        loadBalancerIP:
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9205"
        labels: {}

      # -- security context for the metrics CONTAINER in the pod
      securityContext:
        runAsUser: ${APP_UID}
        runAsNonRoot: true
        # allowPrivilegeEscalation: false
        # capabilities:
        #   drop:
        #     - ALL

      # -- security context for the metrics POD
      podSecurityContext: {}
      # runAsNonRoot: true
      # seccompProfile:
      #   type: RuntimeDefault

      ## Prometheus Operator ServiceMonitor configuration
      ##
      serviceMonitor:
        ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
        ##
        enabled: false

        ## @param metrics.serviceMonitor.namespace Namespace in which Prometheus is running
        ##
        namespace: ""

        ## @param metrics.serviceMonitor.namespaceSelector The selector of the namespace where the target service is located (defaults to the release namespace)
        namespaceSelector:

        ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
        ##
        jobLabel: ""

        ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
        ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
        ##
        interval: 30s

        ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
        ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
        ##
        scrapeTimeout: ""

        ## @param metrics.serviceMonitor.labels Extra labels for the ServiceMonitor
        ##
        labels: {}


    rbac:
      enabled: true
      serviceaccount:
        create: true
        name: nextcloud-serviceaccount
        annotations: {}


    ## @param securityContext for nextcloud pod @deprecated Use `nextcloud.podSecurityContext` instead
    securityContext: {}
