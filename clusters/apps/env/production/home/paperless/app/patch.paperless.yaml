---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: app-template
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.1.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  values:
    controllers:
      paperless:
        type: deployment
        replicas: 1
        containers:
          paperless:
            image:
              repository: "ghcr.io/paperless-ngx/paperless-ngx"
              tag: "2.17.1@sha256:ab72a0ab42a792228cdbe83342b99a48acd49f7890ae54b1ae8e04401fba24ee"
            #args: ["/usr/local/bin/supervisord", "-c", "/etc/supervisord.conf", "--user", "paperless", "--logfile", "/tmp/supervisord.log", "--pidfile", "/tmp/supervisord.pid"]
            env:
              PAPERLESS_URL: "https://${INGRESSROUTE_SUBDOMAIN}.${FAMILY_DOMAIN}"
              PAPERLESS_PORT: &port "8000"
              PAPERLESS_TIME_ZONE: America/New_York
              PAPERLESS_WEBSERVER_WORKERS: "2"
              PAPERLESS_TASK_WORKERS: "2"
              PAPERLESS_REDIS: "unix:///sockets/redis.sock"
              PAPERLESS_CONSUMPTION_DIR: &consume "/data/consume"
              PAPERLESS_DATA_DIR: &pvc "/config"
              PAPERLESS_EXPORT_DIR: &export "/data/export"
              PAPERLESS_MEDIA_ROOT: &media "/data/media"
              PAPERLESS_TRASH_DIR: &trash "/data/trash"
              # PAPERLESS_APPS in envFrom
              # PAPERLESS_SOCIALACCOUNT_PROVIDERS in envFrom
              PAPERLESS_TRUSTED_PROXIES: "${CLUSTER_POD_CIDR}"
              PAPERLESS_OCR_LANGUAGE: "eng"
              PAPERLESS_OCR_USER_ARGS: |
                {"invalidate_digital_signatures": true}
              PAPERLESS_CONSUMER_POLLING: "60" # 1 minute, inotify doesn't work over NFS
              PAPERLESS_CONSUMER_RECURSIVE: "true"
              PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS: "true"
              PAPERLESS_TIKA_ENABLED: "true"
              PAPERLESS_TIKA_ENDPOINT: "http://paperless-tika.home.svc.cluster.local"
              PAPERLESS_TIKA_GOTENBERG_ENDPOINT: "http://paperless-gotenberg.home.svc.cluster.local"
            envFrom:
              - secretRef:
                  name: "paperless-secrets"
            securityContext: &sc
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: "10m"
                memory: "1000Mi"
              limits:
                memory: "3000Mi"
          redis:
            image:
              repository: "public.ecr.aws/docker/library/redis"
              tag: "7.4.3-bookworm@sha256:7df1eeff67eb0ba84f6b9d2940765a6bb1158081426745c185a03b1507de6a09"
            command: ["redis-server", "--save", "''", "--appendonly", "no", "--port", "0", "--bind", "127.0.0.1", "--unixsocket", "/sockets/redis.sock", "--unixsocketperm", "700"] # save and appendonly options forcibly disable RDB and AOF persistence entirely
            securityContext: *sc
            resources:
              requests:
                cpu: "10m"
                memory: "32Mi"
              limits:
                memory: "512Mi"
      tika:
        type: deployment
        replicas: 1
        containers:
          main:
            image:
              repository: "apache/tika"
              tag: "3.1.0.0-full@sha256:1221afa48af9158e14b8d005bbcfa49f3d7fc4e5113db48cad586955bc64992b"
            securityContext: *sc
            resources: # TODO: adjust (Java app)
              requests:
                cpu: "10m"
                memory: "256Mi"
              limits:
                memory: "2000Mi"
      gotenberg:
        type: deployment
        replicas: 1
        containers:
          main:
            image:
              repository: "docker.io/gotenberg/gotenberg"
              tag: "8.20.1@sha256:cda4386c7ed38f18bc6897828be01ba7361c99929a5c84ec5e293d7916e29bac"
            command: ["gotenberg", "--chromium-disable-javascript=true", "--chromium-allow-list=file:///tmp/.*"]
            securityContext: *sc
            resources: # TODO: adjust (Go app)
              requests:
                cpu: "10m"
                memory: "64Mi"
              limits:
                memory: "2000Mi"
    service:
      paperless:
        controller: "paperless"
        ports:
          http:
            port: *port
      tika:
        controller: "tika"
        ports:
          tika:
            port: 80
            targetPort: 9998
      gotenberg:
        controller: "gotenberg"
        ports:
          gotenberg:
            port: 80
            targetPort: 3000
    ingress:
      main:
        enabled: false
    persistence:
      config:
        enabled: true
        existingClaim: "paperless-config"
        globalMounts:
          - path: /config
            readOnly: false
      data:
        enabled: true
        existingClaim: "paperless-data"
        globalMounts:
          - subPath: "consume"
            path: "/data/consume"
          - subPath: "export"
            path: "/data/export"
          - subPath: "media"
            path: "/data/media"
          - subPath: "trash"
            path: "/data/trash"
      tmp:
        enabled: true
        type: emptyDir
        medium: Memory
        advancedMounts:
          paperless:
            paperless:
              - subPath: "paperless"
                path: "/tmp"
              - subPath: "apt"
                path: "/var/lib/apt"
              - &sockdir
                subPath: "sockets"
                path: "/sockets"
            redis:
              - *sockdir
          tika:
            main:
              - subPath: "tika"
                path: "/tmp"
          gotenberg:
            main:
              - subPath: "gotenberg"
                path: "/tmp"
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false # avoid exposing too much info in env vars in case of lateral movement attempt
      securityContext:
        runAsNonRoot: false
        runAsUser: &uid ${APP_UID}
        runAsGroup: *uid
        fsGroup: *uid
        fsGroupChangePolicy: "Always"
        seccompProfile: { type: "RuntimeDefault" }
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #             - key: ${FAMILY_DOMAIN}/role
      #               operator: In
      #               values:
      #                 - apps
