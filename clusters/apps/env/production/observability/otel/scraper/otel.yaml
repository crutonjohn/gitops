---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel-scraper
spec:
  mode: deployment
  image: otel/opentelemetry-collector-contrib:0.120.0
  volumeMounts:
    - name: certs
      mountPath: /var/lib/step
  volumes:
    - name: certs
      secret:
        secretName: otel-scraper-internal-tls
  resources:
    limits:
      cpu: 500m
      memory: 4Gi
  # securityContext:
  #   runAsUser: 0
  #   runAsGroup: 0
  #   privileged: true
  #   capabilities: { add: ["NET_ADMIN"] }


#  additionalContainers:
#    - name: ts-sidecar
#      image: "ghcr.io/tailscale/tailscale:v1.80.3"
#      env:
#        # Store the state in a k8s secret
#        - name: TS_KUBE_SECRET
#          value: "tailscale"
#        - name: TS_DEBUG_FIREWALL_MODE
#          value: auto
#        - name: POD_NAME
#          valueFrom:
#            fieldRef:
#              fieldPath: metadata.name
#        - name: POD_UID
#          valueFrom:
#            fieldRef:
#              fieldPath: metadata.uid
#      envFrom:
#        - secretRef:
#            name: otel-tailscale-env
#      securityContext:
#        runAsUser: 0
#        runAsGroup: 0
#        privileged: true
#        capabilities: { add: ["NET_ADMIN"] }

  serviceAccount: otel-scraper
  config: |
    receivers:
      prometheus:
        config:
          scrape_configs:
            - job_name: 'hass'
              scrape_interval: 60s
              metrics_path: /api/prometheus
              authorization:
                credentials: "${PROMETHEUS_HOME_ASSISTANT_TOKEN}"
              scheme: http
              static_configs:
                - targets: ['home-assistant.home.svc.cluster.local:8123']
              relabel_configs:
                - target_label: instance
                  replacement: home-assistant
            - job_name: nut-exporter
              static_configs:
                - targets: ['192.168.130.2','192.168.130.3'] # nut exporter
              metrics_path: /ups_metrics
              relabel_configs:
                - source_labels: [__address__]
                  target_label: __param_server
                - source_labels: [__param_server]
                  target_label: instance
                - target_label: __address__
                  replacement: nut-exporter.observability.svc.cluster.local:9199
              params:
                username: [ "observer" ]
                password: [ "${NUT_OBSERVER_PASSWORD}" ]
            - job_name: "kubelet"
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              authorization:
                credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - action: labelmap
                  regex: "__meta_kubernetes_node_label_(.+)"
              metric_relabel_configs:
                # Remove duplicate metrics
                - source_labels: ["__name__"]
                  regex: "(apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authentication_token|cadvisor_version|container_blkio|container_cpu|container_fs|container_last|container_memory|container_network|container_oom|container_processes|container|csi_operations|disabled_metric|get_token|go|hidden_metric|kubelet_certificate|kubelet_cgroup|kubelet_container|kubelet_containers|kubelet_cpu|kubelet_device|kubelet_graceful|kubelet_http|kubelet_lifecycle|kubelet_managed|kubelet_node|kubelet_pleg|kubelet_pod|kubelet_run|kubelet_running|kubelet_runtime|kubelet_server|kubelet_started|kubelet_volume|kubernetes_build|kubernetes_feature|machine_cpu|machine_memory|machine_nvm|machine_scrape|node_namespace|plugin_manager|prober_probe|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|storage_operation|volume_manager|volume_operation|workqueue)_(.+)"
                  action: keep
                - source_labels: ["node"]
                  target_label: instance
                  action: replace
            - job_name: "cadvisor"
              scheme: https
              metrics_path: /metrics/cadvisor
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              authorization:
                credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - action: labelmap
                  regex: __meta_kubernetes_node_label_(.+)
            - job_name: "k8s_services"
              honor_labels: true
              metrics_path: /metrics
              scrape_interval: 30s
              kubernetes_sd_configs:
                - role: service
              relabel_configs:
                # Example relabel to scrape only endpoints that have
                # "prometheus.io/scrape = true" annotation.
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
                # Example relabel to customize metric path based on endpoints
                # "prometheus.io/metric_path = <metric path>" annotation.
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_metric_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                # Example relabel to scrape only single, desired port for the service based
                # on endpoints "prometheus.io/port = <port>" annotation.
                - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                  action: replace
                  regex: ([^:]+)(?::\d+)?;(\d+)
                  replacement: $1:$2
                  target_label: __address__
                # Example relabel to configure scrape scheme for all service scrape targets
                # based on endpoints "example.io/scrape_scheme = <scheme>" annotation.
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_scheme]
                  action: replace
                  target_label: __scheme__
                  regex: (https?)
                - action: labelmap
                  regex: __meta_kubernetes_service_label_(.+)
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: namespace
                - source_labels: [__meta_kubernetes_service_name]
                  action: replace
                  target_label: service
            - job_name: "k8s_pods"
              scrape_interval: 30s
              kubernetes_sd_configs:
                - role: pod
              tls_config:
                insecure_skip_verify: true
              relabel_configs:
                # Example relabel to scrape only pods that have
                # "prometheus.io/scrape = true" annotation.
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
                # Example relabel to customize metric path based on pod
                # "prometheus.io/metric_path = <metric path>" annotation.
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_metric_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                # Example relabel to scrape only single, desired port for the pod based
                # on "prometheus.io/port = <port>" annotation.
                - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                  action: replace
                  regex: ([^:]+)(?::\d+)?;(\d+)
                  replacement: $1:$2
                  target_label: __address__
                # Example relabel to configure scrape scheme for all service scrape targets
                # based on endpoints "example.io/scrape_scheme = <scheme>" annotation.
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_scheme]
                  action: replace
                  target_label: __scheme__
                  regex: (https?)
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_(.+)
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: namespace
                - source_labels: [__meta_kubernetes_pod_name]
                  action: replace
                  target_label: pod
                - source_labels: [__meta_kubernetes_pod_node_name]
                  action: replace
                  target_label: node
            - job_name: "k8s_services_super_slow"
              scrape_timeout: 60s
              scrape_interval: 1500s
              metrics_path: /metrics
              kubernetes_sd_configs:
                - role: service
              relabel_configs:
                # Example relabel to scrape only endpoints that have
                # "prometheus.io/scrape = true" annotation.
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                  action: keep
                  regex: super_slow
                # Example relabel to customize metric path based on endpoints
                # "prometheus.io/metric_path = <metric path>" annotation.
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_metric_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                # Example relabel to scrape only single, desired port for the service based
                # on endpoints "prometheus.io/port = <port>" annotation.
                - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                  action: replace
                  regex: ([^:]+)(?::\d+)?;(\d+)
                  replacement: $1:$2
                  target_label: __address__
                # Example relabel to configure scrape scheme for all service scrape targets
                # based on endpoints "example.io/scrape_scheme = <scheme>" annotation.
                - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_scheme]
                  action: replace
                  target_label: __scheme__
                  regex: (https?)
                - action: labelmap
                  regex: __meta_kubernetes_service_label_(.+)
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: namespace
                - source_labels: [__meta_kubernetes_service_name]
                  action: replace
                  target_label: service

      k8s_cluster:
        auth_type: kubeConfig
        allocatable_types_to_report: [cpu, memory]

    processors:
      batch:
        send_batch_max_size: 1500
        send_batch_size: 1000
        timeout: 20s

    exporters:
      otlp:
        endpoint: "otelgw.internal.${FAMILY_DOMAIN}:4317"
        tls:
          insecure: false
          cert_file: /var/lib/step/tls.crt
          key_file: /var/lib/step/tls.key
          ca_file: /var/lib/step/ca.crt
      # otlphttp:
      #   endpoint: "http://100.64.0.9:4318"
      #   timeout: 60s
      #   tls:
      #     insecure: true
      #     insecure_skip_verify: true
      debug:
        verbosity: detailed

    service:
      pipelines:
        metrics:
          receivers:
          - prometheus
          - k8s_cluster
          processors:
          - batch
          exporters:
          - otlp
      telemetry:
        metrics:
          level: detailed
          address: 0.0.0.0:8888

        logs:
          level: debug
