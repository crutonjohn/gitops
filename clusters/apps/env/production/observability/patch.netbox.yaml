---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: netbox
spec:
  values:
    superuser:
      name: admin
      email: admin@example.com
      password: admin
      apiToken: 0123456789abcdef0123456789abcdef01234567
    skipStartupScripts: true
    allowedHosts:
      - '*'
    # Specify one or more name and email address tuples representing NetBox
    # administrators. These people will be notified of application errors (assuming
    # correct email settings are provided).
    admins:
      - ['John Doe', 'jdoe@example.com']
    allowTokenRetrieval: true
    # URL schemes that are allowed within links in NetBox
    allowedUrlSchemes: [file, ftp, ftps, http, https, irc, mailto, sftp, ssh, tel, telnet, tftp, vnc, xmpp]
    banner:
      # Optionally display a persistent banner at the top and/or bottom of every
      # page. HTML is allowed.
      top: ''
      bottom: ''
      # Text to include on the login page above the login form. HTML is allowed.
      login: ''
    # Base URL path if accessing NetBox within a directory. For example, if
    # installed at http://example.com/netbox/, set to 'netbox/'. If using
    # Kubernetes Ingress, make sure you set ingress.hosts[].paths[] appropriately.
    basePath: ''
    changelogRetention: 90
    customValidators: {}
    defaultUserPreferences: {}
    # API Cross-Origin Resource Sharing (CORS) settings. If originAllowAll
    # is set to true, all origins will be allowed. Otherwise, define a list of
    # allowed origins using either originWhitelist or originRegexWhitelist. For
    # more information, see https://github.com/ottoyiu/django-cors-headers
    cors:
      originAllowAll: true
      originWhitelist: []
      originRegexWhitelist: []
      #  - '^(https?://)?(\w+\.)?example\.com$'
    # CSRF settings.  Needed for netbox v3.2.0 and newer. For more information
    # see https://docs.netbox.dev/en/stable/configuration/optional-settings/#csrf_trusted_origins
    csrf:
      # The name of the cookie to use for the cross-site request forgery (CSRF)
      # authentication token.
      cookieName: csrftoken-netbox
      # Defines a list of trusted origins for unsafe (e.g. POST) requests. This is
      # a pass-through to Django's CSRF_TRUSTED_ORIGINS setting. Note that each
      # host listed must specify a scheme (e.g. http:// or `https://).
      trustedOrigins: []
    # Note: this is where the CUSTOM_VALIDATORS setting naturally fits in relation
    # to the upstream NetBox configuration, but the setting cannot be reflected in
    # YAML/JSON as it depends on creating instances of Python classes.
    defaultLanguage: en-us
    debug: false
    dbWaitDebug: true
    email:
      server: localhost
      port: 25
      username: ''
      password: ''
      useSSL: false
      useTLS: false
      sslCertFile: ''
      sslKeyFile: ''
      timeout: 10  # seconds
      from: ''
    # Enforcement of unique IP space can be toggled on a per-VRF basis. To enforce
    # unique IP space within the global table (all prefixes and IP addresses not
    # assigned to a VRF), set enforceGlobalUnique to True.
    enforceGlobalUnique: true
    exemptViewPermissions: []
    #  - dcim.site
    #  - dcim.region
    #  - ipam.prefix
    #
    # Some static choice fields on models can be configured with custom values.
    # Each choice in the list must have a database value and a human-friendly
    # label, and may optionally specify a color.
    # https://docs.netbox.dev/en/stable/configuration/optional-settings/#field_choices
    fieldChoices: {}
      # 'dcim.Site.status':
      #   - [foo, Foo, red]
      #   - [bar, Bar, green]
      #   - [baz, Baz, blue]
      # 'dcim.Site.status+':
      #   ...
    # Enable the GraphQL API
    graphQlEnabled: true
    # HTTP proxies NetBox should use when sending outbound HTTP requests (e.g. for
    # webhooks).
    httpProxies: null
      # http: http://10.10.1.10:3128
      # https: http://10.10.1.10:1080
    # IP addresses recognized as internal to the system. The debugging toolbar will
    # be available only to clients accessing NetBox from an internal IP.
    internalIPs: ['127.0.0.1', '::1']
    # The number of days to retain job results (scripts and reports). Set this to 0
    # to retain job results in the database indefinitely.
    # https://docs.netbox.dev/en/stable/configuration/dynamic-settings/#jobresult_retention
    jobResultRetention: 60
    # Enable custom logging. Please see the Django documentation for detailed
    # guidance on configuring custom logs:
    # https://docs.djangoproject.com/en/1.11/topics/logging/
    logging: {}
    loginPersistence: false
    loginRequired: true
    loginTimeout: 1209600
    logoutRedirectUrl: home
    maintenanceMode: false
    mapsUrl: 'https://maps.google.com/?q='
    maxPageSize: 0

    # By default uploaded media is stored in an attached volume. Using
    # Django-storages is also supported. Provide the class path of the storage
    # driver in storageBackend and any configuration options in storageConfig.
    storageBackend: null  # storages.backends.s3boto3.S3Boto3Storage
    storageConfig: {}
      # AWS_ACCESS_KEY_ID: 'Key ID'
      # AWS_SECRET_ACCESS_KEY: 'Secret'
      # AWS_STORAGE_BUCKET_NAME: 'netbox'
      # AWS_S3_ENDPOINT_URL: 'endpoint URL of S3 provider'
      # AWS_S3_REGION_NAME: 'eu-west-1'
    metricsEnabled: true

    napalm:
      # Credentials that NetBox will use to access live devices.
      username: ''
      password: ''

      # NAPALM timeout (in seconds). (Default: 30)
      timeout: 30

      # NAPALM optional arguments (see
      # http://napalm.readthedocs.io/en/latest/support/#optional-arguments).
      # Arguments must be provided as a dictionary.
      args: {}
    # Determine how many objects to display per page within a list. (Default: 50)
    paginateCount: 50
    # Enable installed plugins. Add the name of each plugin to the list.
    plugins: []
    # Plugins configuration settings. These settings are used by various plugins
    # that the user may have installed. Each key in the dictionary is the name of
    # an installed plugin and its value is a dictionary of settings.
    pluginsConfig: {}
    # The default value for the amperage field when creating new power feeds.
    # https://docs.netbox.dev/en/stable/configuration/dynamic-settings/#powerfeed_default_amperage
    powerFeedDefaultAmperage: 15
    # The default value (percentage) for the max_utilization field when creating
    # new power feeds.
    # https://docs.netbox.dev/en/stable/configuration/dynamic-settings/#powerfeed_default_max_utilization
    powerFeedMaxUtilisation: 80
    # The default value for the voltage field when creating new power feeds.
    # https://docs.netbox.dev/en/stable/configuration/dynamic-settings/#powerfeed_default_voltage
    powerFeedDefaultVoltage: 120
    # When determining the primary IP address for a device, IPv6 is preferred over
    # IPv4 by default. Set this to True to prefer IPv4 instead.
    preferIPv4: true
    # Rack elevation size defaults, in pixels. For best results, the ratio of width
    # to height should be roughly 10:1.
    rackElevationDefaultUnitHeight: 22
    rackElevationDefaultUnitWidth: 220
    # Remote authentication support
    remoteAuth:
      enabled: false
      backend: netbox.authentication.RemoteUserBackend
      header: HTTP_REMOTE_USER
      autoCreateUser: true
      defaultGroups: []
      defaultPermissions: {}
      groupSyncEnabled: false
      groupHeader: HTTP_REMOTE_USER_GROUP
      superuserGroups: []
      superusers: []
      staffGroups: []
      staffUsers: []
      groupSeparator: '|'
    releaseCheck:
      # This repository is used to check whether there is a new release of NetBox
      # available. Set to null to disable the version check or use the URL below to
      # check for release in the official NetBox repository.
      url: null
      # url: https://api.github.com/repos/netbox-community/netbox/releases
    # Maximum execution time for background tasks, in seconds.
    rqDefaultTimeout: 300  # 5 mins
    # The name to use for the session cookie.
    sessionCookieName: sessionid-netbox
    # Localization
    enableLocalization: false
    # Time zone (default: UTC)
    timeZone: UTC
    # Date/time formatting. See the following link for supported formats:
    # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
    dateFormat: 'N j, Y'
    shortDateFormat: 'Y-m-d'
    timeFormat: 'g:i a'
    shortTimeFormat: 'H:i:s'
    dateTimeFormat: 'N j, Y g:i a'
    shortDateTimeFormat: 'Y-m-d H:i'
    extraConfig: []
    secretKey: ""
    ## Provide passwords using existing secret
    # If set, this Secret must contain the following keys:
    # - db_password: database password (if postgresql.enabled is false and
    #     externalDatabase.existingSecretName is blank)
    # - email_password: SMTP user password
    # - ldap_bind_password: Password for LDAP bind DN
    # - napalm_password: NAPALM user password
    # - redis_tasks_password: Redis password for tasks Redis instance (if
    #     redis.enabled is false and tasksRedis.existingSecretName is blank)
    # - redis_cache_password: Redis password for caching Redis instance (if
    #     redis.enabled is false and cachingRedis.existingSecretName is blank)
    # - secret_key: session encryption token (50+ random characters)
    # - superuser_password: Password for the initial super-user account
    # - superuser_api_token: API token created for the initial super-user account
    existingSecret: ""
    postgresql:
      enabled: true
      auth:
        username: netbox
        database: netbox
    ## External database settings
    # These are used if postgresql.enabled is false, and are ignored otherwise
    externalDatabase:
      host: localhost
      port: 5432
      database: netbox
      username: netbox
      password: ""
      existingSecretName: ""
      existingSecretKey: postgresql-password
      sslMode: prefer
      connMaxAge: 300
      disableServerSideCursors: false
      targetSessionAttrs: read-write
    redis:
      enabled: true
    tasksRedis:
      database: 0
      ssl: false
      insecureSkipTlsVerify: false
      caCertPath: ""
    cachingRedis:
      database: 1
      ssl: false
      insecureSkipTlsVerify: false
      caCertPath: ""
    imagePullSecrets: []
    nameOverride: ""
    fullnameOverride: ""
    ## Storage configuration for media
    persistence:
      enabled: true
      ##
      ## Existing claim to use
      existingClaim: ""
    ## Storage configuration for reports
    reportsPersistence:
      enabled: false
    commonLabels: {}
    commonAnnotations: {}
    podAnnotations: {}
    podLabels: {}
    podSecurityContext:
      fsGroup: 1568
      runAsNonRoot: true
      # runAsUser: 1000
      # runAsGroup: 1000
    securityContext:
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1568
      runAsGroup: 1568
    service:
      annotations: {}
      type: ClusterIP
      port: 80
      nodePort: ""
      clusterIP: ""
      clusterIPs: []
      externalIPs: []
      externalTrafficPolicy: ""
      ipFamilyPolicy: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      # - 10.0.0.0/8
    ingress:
      enabled: false
    resources: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
    topologySpreadConstraints: []
      #  - maxSkew: 1
      #    topologyKey: topology.kubernetes.io/zone
      #    whenUnsatisfiable: DoNotSchedule
      #    labelSelector:
      #      matchLabels:
      #        "app.kubernetes.io/component": netbox
      #        "app.kubernetes.io/name": netbox
    readinessProbe:
      enabled: true
      initialDelaySeconds: 0
      timeoutSeconds: 1
      periodSeconds: 10
      successThreshold: 1
    init:
      image:
        repository: busybox
        tag: 1.32.1
        pullPolicy: IfNotPresent
      resources: {}
      securityContext:
        capabilities:
          drop:
            - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1568
        runAsGroup: 1568  # Keep the same as securityContext.runAsGroup
    housekeeping:
      enabled: true
      concurrencyPolicy: Forbid
      failedJobsHistoryLimit: 5
      restartPolicy: OnFailure
      schedule: '0 0 * * *'
      successfulJobsHistoryLimit: 5
      suspend: false
      podAnnotations: {}
      podLabels: {}
      podSecurityContext:
        fsGroup: 1568
        runAsNonRoot: true
        # runAsUser: 1000
        # runAsGroup: 1000
      securityContext:
        capabilities:
          drop:
            - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1568
        runAsGroup: 1568
    worker:
      enabled: true
      replicaCount: 1
      podAnnotations: {}
      podLabels: {}
      podSecurityContext:
        fsGroup: 1568
        runAsNonRoot: true
        # runAsUser: 1000
        # runAsGroup: 1000
      securityContext:
        capabilities:
          drop:
            - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1568
        runAsGroup: 1568
