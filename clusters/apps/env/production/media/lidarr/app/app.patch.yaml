# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json---
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: app-template
spec:
  chart:
    spec:
      version: 3.1.0
  values:
    defaultPodOptions:
      securityContext:
        fsGroup: ${APP_UID}
        runAsNonRoot: true
        runAsUser: ${APP_UID}
        runAsGroup: ${APP_UID}

      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #             - key: ${FAMILY_DOMAIN}/role
      #               operator: In
      #               values:
      #                 - apps

    controllers:
      main:
        type: deployment

        initContainers:
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16
            envFrom: &envFrom
              - secretRef:
                  name: lidarr-secret

        containers:
          main:
            nameOverride: lidarr
            image:
              repository: ghcr.io/crutonjohn/lidarr-plugins
              tag: rolling@sha256:4bac3540b98aab19eb2828ea0dc91daee1351068e214e9f378d8fd4e6e5e6eef
              pullPolicy: IfNotPresent
            envFrom: *envFrom
            probes:
              liveness:
                enabled: false
              readiness:
                enabled: false
              startup:
                enabled: false
            resources:
              requests:
                cpu: 20m
                memory: 1000M
              limits:
                memory: 4200M
          # metrics:
          #   nameOverride: metrics
          #   dependsOn: [main]
          #   args: [lidarr]
          #   image:
          #     repository: ghcr.io/onedr0p/exportarr
          #     tag: v2.0.1
          #     pullPolicy: IfNotPresent
          #   env:
          #     URL: "http://localhost"
          #     CONFIG: /config/config.xml
          #     PORT: "9792"
          #     ENABLE_ADDITIONAL_METRICS: "false"
          #     ENABLE_UNKNOWN_QUEUE_ITEMS: "false"
          #   probes:
          #     liveness:
          #       enabled: false
          #     readiness:
          #       enabled: false
          #     startup:
          #       enabled: false
          #   resources:
          #     requests:
          #       cpu: 20m
          #       memory: 40M
          #     limits:
          #       memory: 100M

    service:
      main:
        enabled: true
        controller: main
        primary: true
        ports:
          http:
            port: 8686
      # metrics:
      #   enabled: true
      #   controller: main
      #   primary: false
      #   ports:
      #     metrics:
      #       enabled: true
      #       primary: false
      #       protocol: HTTP
      #       port: 9792
      #       targetPort: 9792
      #   annotations:
      #     prometheus.io/scrape: 'true'
      #     prometheus.io/port: '9792'

    persistence:
      config:
        enabled: true
        existingClaim: "lidarr-config"
        globalMounts:
          - path: /config
      bysh-import:
        enabled: true
        existingClaim: "lidarr-import"
        advancedMounts:
          main:
            main:
              - path: /bysh
                readOnly: false
      deemix-import:
        enabled: true
        existingClaim: "lidarr-downloads"
        advancedMounts:
          main:
            main:
              - path: /downloads
                readOnly: false
      music-library:
        enabled: true
        existingClaim: "music-library"
        advancedMounts:
          main:
            main:
              - path: /music
                readOnly: false

    # probes:
    #   liveness:
    #     enabled: true
    #     custom: true
    #     spec:
    #       exec:
    #         command:
    #           - /usr/bin/env
    #           - bash
    #           - -c
    #           - curl --fail localhost:8686/api/v1/system/status?apiKey=`IFS=\> && while read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`
    #       initialDelaySeconds: 10
    #       periodSeconds: 60
    #       timeoutSeconds: 20
    #       failureThreshold: 3
